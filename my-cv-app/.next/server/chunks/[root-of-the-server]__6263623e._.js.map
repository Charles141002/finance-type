{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/halca/finance-type/my-cv-app/utils/blocksToHTML.ts"],"sourcesContent":["import { Block } from \"./types\";\n\nexport default function blocksToHTML(blocks: Block[], fontScale: number = 1): string {\n    const render = (list: Block[], depth: number): string =>\n      list.map(block => {\n      switch (block.type) {\n        case \"header\": {\n          const text = block.content?.title || \"\";\n          return `<div class=\"cv-header\"><div class=\"cv-name\">${text}</div></div>`;\n        }\n  \n        case \"contact\": {\n          const c = block.content || {};\n          const parts = [c.email, c.phone, c.address, c.linkedin].filter(Boolean).join(\" • \");\n          return `<div class=\"cv-contact\">${parts}</div>`;\n        }\n  \n        case \"text\": {\n          const raw = block.content || \"\";\n          // enlever les balises pour les heuristiques simples\n          const plain = typeof raw === \"string\" ? raw.replace(/<[^>]*>/g, \"\").replace(/\\u00A0/g, \" \") : \"\";\n          const hasLetter = /[A-Za-zÀ-ÖØ-öø-ÿ]/.test(plain);\n          const isIntro = /Étudiant\\s+à\\s+IMT\\s+Atlantique/i.test(plain);\n          const hasListTag = typeof raw === \"string\" && /<(ul|ol)\\b/i.test(raw);\n          const hasLineBreaks = typeof raw === \"string\" && /<br\\s*\\/?\\s*>/i.test(raw);\n\n          // Si bloc totalement vide (aucune lettre), ne rien rendre (pas d'espace)\n          if (!hasLetter && !hasListTag) {\n            return `${render(block.children || [], depth + 1)}`;\n          }\n\n          if (isIntro) {\n            return `<div class=\"cv-intro\">${raw}</div>${render(block.children || [], depth + 1)}`;\n          }\n\n          // Conserver les listes natives UL/OL si présentes\n          if (hasListTag) {\n            return `<div class=\"cv-text\">${raw}</div>${render(block.children || [], depth + 1)}`;\n          }\n\n          // Support multi-lignes dans un seul bloc texte via <br>\n          if (hasLineBreaks) {\n            const parts = (raw as string).split(/<br\\s*\\/?\\s*>/i);\n            const htmlLines = parts\n              .map((line) => {\n                const plainLine = line.replace(/<[^>]*>/g, \"\").replace(/\\u00A0/g, \" \").trim();\n                if (!/[A-Za-zÀ-ÖØ-öø-ÿ]/.test(plainLine)) return \"\"; // ignorer ligne vide\n                const isBulletLine = /^\\s*[•\\-–]/.test(plainLine);\n                const cleaned = isBulletLine ? line.replace(/^\\s*[•\\-–]\\s*/, \"\") : line;\n                const levelClass = depth >= 2 ? \" cv-bullet--level2\" : \"\";\n                if (isBulletLine) {\n                  return `<div class=\\\"cv-text cv-bullet${levelClass}\\\">${cleaned}</div>`;\n                }\n                return `<div class=\\\"cv-text\\\">${line}</div>`;\n              })\n              .filter(Boolean)\n              .join(\"\");\n            return `${htmlLines}${render(block.children || [], depth + 1)}`;\n          }\n\n          // Ligne simple\n          const isBullet = /^\\s*[•\\-–]/.test(plain);\n          const cleaned = isBullet && typeof raw === \"string\" ? raw.replace(/^\\s*[•\\-–]\\s*/, \"\") : raw;\n          const levelClass = depth >= 2 ? \" cv-bullet--level2\" : \"\";\n          if (isBullet) {\n            return `<div class=\"cv-text cv-bullet${levelClass}\">${cleaned}</div>${render(block.children || [], depth + 1)}`;\n          }\n          return `<div class=\"cv-text\">${raw}</div>${render(block.children || [], depth + 1)}`;\n        }\n  \n        case \"divider\":\n          return `<hr class=\"cv-divider\"/>`;\n  \n        case \"section\":\n          return `<div class=\"cv-section\">\\n            <div class=\"cv-section-title\">${block.content?.title || \"\"}</div>\\n            ${render(block.children || [], depth + 1)}\\n          </div>`;\n  \n        case \"subsection\": {\n          const title = block.content?.title || \"\";\n          const subtitle = block.content?.subtitle || \"\";\n          const period = block.content?.period || \"\";\n          const childrenHtml = render(block.children || [], depth + 1);\n          const childPlain = childrenHtml.replace(/<[^>]*>/g, \"\").replace(/\\u00A0/g, \" \").trim();\n          const childrenHasLetters = /[A-Za-zÀ-ÖØ-öø-ÿ]/.test(childPlain);\n\n          // Si aucun contenu enfant avec lettres, masquer entièrement la sous-section\n          if (!childrenHasLetters) {\n            return \"\";\n          }\n\n          return `<div class=\\\"cv-subsection\\\">\\n            <div class=\\\"cv-subsection-header\\\">\\n              <div>\\n                <div class=\\\"cv-subsection-title\\\">${title}</div>\\n                ${subtitle ? `<div class=\\\\\\\"cv-subsection-subtitle\\\\\\\">${subtitle}</div>` : \"\"}\\n              </div>\\n              ${period ? `<div class=\\\\\\\"cv-subsection-period\\\\\\\">${period}</div>` : \"\"}\\n            </div>\\n            ${childrenHtml}\\n          </div>`;\n        }\n  \n        default:\n          return \"\";\n      }\n      }).join(\"\");\n\n    // envelopper dans un conteneur .cv pour appliquer les styles globaux\n    return `<div class=\"cv\">${render(blocks, 0)}</div>`;\n  }\n  "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/halca/finance-type/my-cv-app/utils/cvStyles.ts"],"sourcesContent":["export function getCvCss(fontScale: number = 1): string {\r\n  const fs10 = 10 * fontScale; // base body font size in pt\r\n  const fs12 = 12 * fontScale;\r\n  const fs18 = 18 * fontScale;\r\n  const gap8 = 8 * fontScale;\r\n  const gap4 = 4 * fontScale;\r\n  const gap2 = 2 * fontScale;\r\n  const indent1 = 16 * fontScale;\r\n  const indent2 = 22 * fontScale;\r\n\r\n  return `\r\n  /* Page and typography */\r\n  @page { size: A4; margin: 15mm; }\r\n  .cv { font-family: 'Times New Roman', Times, serif; font-size: ${fs10}pt; line-height: 1.25; color: #000; }\r\n  .cv h1, .cv h2, .cv h3, .cv h4, .cv p { margin: 0; padding: 0; }\r\n  .cv a { color: inherit; text-decoration: underline; }\r\n\r\n  /* Header */\r\n  .cv .cv-header { text-align: center; margin-bottom: ${gap8}px; }\r\n  .cv .cv-name { font-size: ${fs18}pt; font-weight: 700; }\r\n  .cv .cv-contact { text-align: center; font-size: ${fs10}pt; margin-top: ${gap2}px; }\r\n  .cv .cv-intro { text-align: center; font-style: italic; margin-bottom: ${gap8}px; }\r\n\r\n  /* Sections */\r\n  .cv .cv-section { margin-top: ${gap8}px; }\r\n  .cv .cv-section-title { font-size: ${fs12}pt; text-transform: uppercase; margin: 0 0 ${gap4}px 0; padding-bottom: ${gap2}px; border-bottom: 0.5pt solid #000; }\r\n\r\n  /* Subsections */\r\n  .cv .cv-subsection { margin-bottom: ${gap4}px; }\r\n  .cv .cv-subsection-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: ${gap2}px; column-gap: ${gap4}px; }\r\n  .cv .cv-subsection-title { font-size: ${fs10}pt; font-weight: 600; }\r\n  .cv .cv-subsection-subtitle { font-size: ${fs10}pt; margin-top: ${Math.max(1 * fontScale, 1)}px; }\r\n  .cv .cv-subsection-period { font-size: ${fs10}pt; font-style: italic; white-space: nowrap; }\r\n\r\n  /* Text and bullets */\r\n  .cv .cv-text { font-size: ${fs10}pt; margin-bottom: ${gap2}px; }\r\n  .cv .cv-bullet { position: relative; padding-left: ${indent1}px; }\r\n  .cv .cv-bullet::before { content: \"–\"; position: absolute; left: 0; top: 0; }\r\n  .cv .cv-bullet--level2 { padding-left: ${indent2}px; }\r\n  .cv .cv-bullet--level2::before { content: \"•\"; }\r\n\r\n  /* Divider */\r\n  .cv hr.cv-divider { border: 0; border-top: 0.5pt solid #000; margin: ${gap8}px 0; }\r\n  `;\r\n}\r\n\r\nexport default getCvCss;\r\n\r\n"],"names":[],"mappings":";;;;;;AAAO,SAAS,SAAS,YAAoB,CAAC;IAC5C,MAAM,OAAO,KAAK,WAAW,4BAA4B;IACzD,MAAM,OAAO,KAAK;IAClB,MAAM,OAAO,KAAK;IAClB,MAAM,OAAO,IAAI;IACjB,MAAM,OAAO,IAAI;IACjB,MAAM,OAAO,IAAI;IACjB,MAAM,UAAU,KAAK;IACrB,MAAM,UAAU,KAAK;IAErB,OAAO,CAAC;;;iEAGuD,EAAE,KAAK;;;;;sDAKlB,EAAE,KAAK;4BACjC,EAAE,KAAK;mDACgB,EAAE,KAAK,gBAAgB,EAAE,KAAK;yEACR,EAAE,KAAK;;;gCAGhD,EAAE,KAAK;qCACF,EAAE,KAAK,2CAA2C,EAAE,KAAK,sBAAsB,EAAE,KAAK;;;sCAGrF,EAAE,KAAK;qHACwE,EAAE,KAAK,gBAAgB,EAAE,KAAK;wCAC3G,EAAE,KAAK;2CACJ,EAAE,KAAK,gBAAgB,EAAE,KAAK,GAAG,CAAC,IAAI,WAAW,GAAG;yCACtD,EAAE,KAAK;;;4BAGpB,EAAE,KAAK,mBAAmB,EAAE,KAAK;qDACR,EAAE,QAAQ;;yCAEtB,EAAE,QAAQ;;;;uEAIoB,EAAE,KAAK;EAC5E,CAAC;AACH;uCAEe","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/halca/finance-type/my-cv-app/pages/api/generate-pdf.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\nimport puppeteer from \"puppeteer\";\nimport blocksToHTML from \"../../utils/blocksToHTML\";\nimport { Block } from \"../../utils/types\";\nimport getCvCss from \"../../utils/cvStyles\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const blocks: Block[] = req.body.blocks;\n  const fontScale: number = req.body.fontScale || 1;\n\n  const html = `\n  <html>\n    <head>\n      <style>${getCvCss(fontScale)}</style>\n    </head>\n    <body>${blocksToHTML(blocks, fontScale)}</body>\n  </html>`;\n\n  const browser = await puppeteer.launch({ args: [\"--no-sandbox\"] });\n  const page = await browser.newPage();\n  await page.setContent(html);\n\n  const pdf = await page.pdf({ format: \"A4\", printBackground: true });\n  await browser.close();\n\n  res.setHeader(\"Content-Type\", \"application/pdf\");\n  res.end(pdf);\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;;;;;;;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,MAAM,SAAkB,IAAI,IAAI,CAAC,MAAM;IACvC,MAAM,YAAoB,IAAI,IAAI,CAAC,SAAS,IAAI;IAEhD,MAAM,OAAO,CAAC;;;aAGH,EAAE,IAAA,qHAAQ,EAAC,WAAW;;UAEzB,EAAE,IAAA,yHAAY,EAAC,QAAQ,WAAW;SACnC,CAAC;IAER,MAAM,UAAU,MAAM,6HAAS,CAAC,MAAM,CAAC;QAAE,MAAM;YAAC;SAAe;IAAC;IAChE,MAAM,OAAO,MAAM,QAAQ,OAAO;IAClC,MAAM,KAAK,UAAU,CAAC;IAEtB,MAAM,MAAM,MAAM,KAAK,GAAG,CAAC;QAAE,QAAQ;QAAM,iBAAiB;IAAK;IACjE,MAAM,QAAQ,KAAK;IAEnB,IAAI,SAAS,CAAC,gBAAgB;IAC9B,IAAI,GAAG,CAAC;AACV","debugId":null}}]
}